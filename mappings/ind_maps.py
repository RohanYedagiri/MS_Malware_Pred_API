import ast
import numpy as np
import lightgbm as lgb

def parse_short_json(request):

    # AVProductStatesIdentifier,==========================================================>
    with open('./data/maps/avpstatesid.txt', 'r') as f:
        avpstates = ast.literal_eval(f.read())
    avpstates_avg = np.average(list(avpstates.values()))
    AVProductStatesIdentifier = int(request.form['AVProductStatesIdentifier'])
    if AVProductStatesIdentifier in list(avpstates.keys()):
        AVProductStatesIdentifier = avpstates[AVProductStatesIdentifier]
    else:
        AVProductStatesIdentifier = avpstates_avg

    # AVProductsInstalled==========================================================>
    AVProductsInstalled = request.form['AVProductsInstalled']

    # CountryIdentifier ==========================================================>
    with open('./data/maps/countryid.txt', 'r') as f:
        countryid = ast.literal_eval(f.read())
    countryid_avg = np.average(list(countryid.values()))
    CountryIdentifier = int(request.form['CountryIdentifier'])
    if CountryIdentifier in list(countryid.keys()):
        CountryIdentifier = countryid[CountryIdentifier]
    else:
        CountryIdentifier = countryid_avg

    # CityIdentifier,==========================================================>
    with open('./data/maps/cityid.txt', 'r') as f:
        cityid = ast.literal_eval(f.read())
    cityid_avg = np.average(list(cityid.values()))
    CityIdentifier = int(request.form['CityIdentifier'])
    if CityIdentifier in list(cityid.keys()):
        CityIdentifier = cityid[CityIdentifier]
    else:
        CityIdentifier = cityid_avg

    # SmartScreen,==========================================================>
    with open('./data/maps/smartscrn.txt', 'r') as f:
        smartscrn = ast.literal_eval(f.read())
    smartscrn_avg = np.average(list(smartscrn.values()))
    SmartScreen = request.form['SmartScreen']
    if SmartScreen in list(smartscrn.keys()):
        SmartScreen = smartscrn[SmartScreen]
    else:
        SmartScreen = smartscrn_avg

    # Census_OEMModelIdentifier,==========================================================>
    with open('./data/maps/cen_oem_id.txt', 'r') as f:
        cen_oem_id = ast.literal_eval(f.read())
    cen_oem_id_avg = np.average(list(cen_oem_id.values()))
    Census_OEMModelIdentifier = int(request.form['Census_OEMModelIdentifier'])
    if Census_OEMModelIdentifier in list(cen_oem_id.keys()):
        Census_OEMModelIdentifier = cen_oem_id[Census_OEMModelIdentifier]
    else:
        Census_OEMModelIdentifier = cen_oem_id_avg

    # Census_ProcessorModelIdentifier,==========================================================>
    with open('./data/maps/cen_promod_id.txt', 'r') as f:
        cen_promod_id = ast.literal_eval(f.read())
    cen_promod_id_avg = np.average(list(cen_promod_id.values()))
    Census_ProcessorModelIdentifier = int(request.form['Census_ProcessorModelIdentifier'])
    if Census_ProcessorModelIdentifier in list(cen_promod_id.keys()):
        Census_ProcessorModelIdentifier = cen_promod_id[Census_ProcessorModelIdentifier]
    else:
        Census_ProcessorModelIdentifier = cen_promod_id_avg

    # Census_SystemVolumeTotalCapacity ==========================================================>
    Census_SystemVolumeTotalCapacity = request.form['Census_SystemVolumeTotalCapacity']

    # Census_OSInstallTypeName,==========================================================>
    with open('./data/maps/cen_osinstall_type.txt', 'r') as f:
        cen_osinstall_type = ast.literal_eval(f.read())

    cen_osinstall_type_avg = np.average(list(cen_osinstall_type.values()))
    Census_OSInstallTypeName = request.form['Census_OSInstallTypeName']
    if Census_OSInstallTypeName in list(cen_osinstall_type.keys()):
        Census_OSInstallTypeName = cen_osinstall_type[Census_OSInstallTypeName]
    else:
        Census_OSInstallTypeName = cen_osinstall_type_avg

    # Census_FirmwareVersionIdentifier,==========================================================>
    with open('./data/maps/cen_firmware_id.txt', 'r') as f:
        cen_firmware_id = ast.literal_eval(f.read())

    cen_firmware_id_avg = np.average(list(cen_firmware_id.values()))
    Census_FirmwareVersionIdentifier = int(request.form['Census_FirmwareVersionIdentifier'])
    if Census_FirmwareVersionIdentifier in list(cen_firmware_id.keys()):
        Census_FirmwareVersionIdentifier = cen_firmware_id[Census_FirmwareVersionIdentifier]
    else:
        Census_FirmwareVersionIdentifier = cen_firmware_id_avg

    # avsig_ver_1,,==========================================================>
    with open('./data/maps/avsig_v1.txt', 'r') as f:
        avsig_v1 = ast.literal_eval(f.read())

    avsig_v1_avg = np.average(list(avsig_v1.values()))
    avsig_ver_1 = int(request.form['avsig_ver_1'])
    if avsig_ver_1 in list(avsig_v1.keys()):
        avsig_ver_1 = avsig_v1[avsig_ver_1]
    else:
        avsig_ver_1 = avsig_v1_avg

    # avsig_ver_2,,==========================================================>
    with open('./data/maps/avsig_v2.txt', 'r') as f:
        avsig_v2 = ast.literal_eval(f.read())

    avsig_v2_avg = np.average(list(avsig_v2.values()))
    avsig_ver_2 = int(request.form['avsig_ver_2'])
    if avsig_ver_2 in list(avsig_v2.keys()):
        avsig_ver_2 = avsig_v2[avsig_ver_2]
    else:
        avsig_ver_2 = avsig_v2_avg

    # Census_OS_ver_3==========================================================>
    with open('./data/maps/cen_os_v3.txt', 'r') as f:
        cen_os_v3 = ast.literal_eval(f.read())

    cen_os_v3_avg = np.average(list(cen_os_v3.values()))
    Census_OS_ver_3 = int(request.form['Census_OS_ver_3'])
    if Census_OS_ver_3 in list(cen_os_v3.keys()):
        Census_OS_ver_3 = cen_os_v3[Census_OS_ver_3]
    else:
        Census_OS_ver_3 = cen_os_v3_avg

    short_feats_list = [AVProductStatesIdentifier,
                   AVProductsInstalled,
                   CountryIdentifier,
                   CityIdentifier,
                   SmartScreen,
                   Census_OEMModelIdentifier,
                   Census_ProcessorModelIdentifier,
                   Census_SystemVolumeTotalCapacity,
                   Census_OSInstallTypeName,
                   Census_FirmwareVersionIdentifier,
                   avsig_ver_1,
                   avsig_ver_2,
                   Census_OS_ver_3]
    short_feats = np.array(short_feats_list).reshape(1, -1)
    short_model = lgb.Booster(model_file='./data/models/Short_LGB_Model.txt')
    detections = short_model.predict(short_feats)
    detections = round(detections[0], 2)

    if detections > 0.5:
        interpretation = 'Device is vulnerable'
    else:
        interpretation = 'Device is safe'

    # step4: return result json
    result1 = {
        'Status': 'Success',
        'Threshold_limit': 0.5,
        'Has_Detections': detections,
        'Interpretation': interpretation
    }
    return short_feats_list, result1
