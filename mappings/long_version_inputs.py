import numpy as np
import pandas as pd
import lightgbm as lgb
from sklearn.externals import joblib
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import ExtraTreesClassifier
import category_encoders


def parse_json_predict_result(request) -> dict:
    """
    returns parsed json
    :param request
    :return:
    """
    feats = request.get_json()
    AVProductsInstalled = feats["AVProductsInstalled"]
    OsPlatformSubRelease = feats["OsPlatformSubRelease"]
    SkuEdition = feats["SkuEdition"]
    SmartScreen = feats["SmartScreen"]
    Census_MDC2FormFactor = feats["Census_MDC2FormFactor"]
    Census_PrimaryDiskTypeName = feats["Census_PrimaryDiskTypeName"]
    Census_SystemVolumeTotalCapacity = feats["Census_SystemVolumeTotalCapacity"]
    Census_TotalPhysicalRAM = feats["Census_TotalPhysicalRAM"]
    Census_InternalPrimaryDiagonalDisplaySizeInInches = feats["Census_InternalPrimaryDiagonalDisplaySizeInInches"]
    Census_InternalPrimaryDisplayResolutionVertical = feats["Census_InternalPrimaryDisplayResolutionVertical"]
    Census_PowerPlatformRoleName = feats["Census_PowerPlatformRoleName"]
    Census_InternalBatteryNumberOfCharges = feats["Census_InternalBatteryNumberOfCharges"]
    Census_OSInstallTypeName = feats["Census_OSInstallTypeName"]
    Census_OSWUAutoUpdateOptionsName = feats["Census_OSWUAutoUpdateOptionsName"]
    Census_ActivationChannel = feats["Census_ActivationChannel"]
    Census_IsSecureBootEnabled = feats["Census_IsSecureBootEnabled"]
    Wdft_IsGamer = feats["Wdft_IsGamer"]
    Wdft_RegionIdentifier = feats["Wdft_RegionIdentifier"]
    AVProductStatesIdentifier_new = feats["AVProductStatesIdentifier_new"]
    CountryIdentifier_new = feats["CountryIdentifier_new"]
    OrganizationIdentifier_new = feats["OrganizationIdentifier_new"]
    GeoNameIdentifier_new = feats["GeoNameIdentifier_new"]
    LocaleEnglishNameIdentifier_new = feats["LocaleEnglishNameIdentifier_new"]
    OsSuite_new = feats["OsSuite_new"]
    IeVerIdentifier_new = feats["IeVerIdentifier_new"]
    Census_OEMNameIdentifier_new = feats["Census_OEMNameIdentifier_new"]
    Census_ProcessorCoreCount_new = feats["Census_ProcessorCoreCount_new"]
    Census_ProcessorModelIdentifier_new = feats["Census_ProcessorModelIdentifier_new"]
    Census_ChassisTypeName_new = feats["Census_ChassisTypeName_new"]
    Census_OSEdition_new = feats["Census_OSEdition_new"]
    Census_OSUILocaleIdentifier_new = feats["Census_OSUILocaleIdentifier_new"]
    Census_FirmwareManufacturerIdentifier_new = feats["Census_FirmwareManufacturerIdentifier_new"]
    AppVersion2_new = feats["AppVersion2_new"]
    AppVersion3_new = feats["AppVersion3_new"]
    AvSigVersion1_new = feats["AvSigVersion1_new"]
    Census_OSVersion3_new = feats["Census_OSVersion3_new"]
    OsBuildLab0_new = feats["OsBuildLab0_new"]
    OsBuildLab1_new = feats["OsBuildLab1_new"]
    OsBuildLab40_new = feats["OsBuildLab40_new"]
    OsBuildLab41_new = feats["OsBuildLab41_new"]

    a = np.array([AVProductsInstalled,
                  OsPlatformSubRelease,
                  SkuEdition,
                  SmartScreen,
                  Census_MDC2FormFactor,
                  Census_PrimaryDiskTypeName,
                  Census_SystemVolumeTotalCapacity,
                  Census_TotalPhysicalRAM,
                  Census_InternalPrimaryDiagonalDisplaySizeInInches,
                  Census_InternalPrimaryDisplayResolutionVertical,
                  Census_PowerPlatformRoleName,
                  Census_InternalBatteryNumberOfCharges,
                  Census_OSInstallTypeName,
                  Census_OSWUAutoUpdateOptionsName,
                  Census_ActivationChannel,
                  Census_IsSecureBootEnabled,
                  Wdft_IsGamer,
                  Wdft_RegionIdentifier,
                  AVProductStatesIdentifier_new,
                  CountryIdentifier_new,
                  OrganizationIdentifier_new,
                  GeoNameIdentifier_new,
                  LocaleEnglishNameIdentifier_new,
                  OsSuite_new,
                  IeVerIdentifier_new,
                  Census_OEMNameIdentifier_new,
                  Census_ProcessorCoreCount_new,
                  Census_ProcessorModelIdentifier_new,
                  Census_ChassisTypeName_new,
                  Census_OSEdition_new,
                  Census_OSUILocaleIdentifier_new,
                  Census_FirmwareManufacturerIdentifier_new,
                  AppVersion2_new,
                  AppVersion3_new,
                  AvSigVersion1_new,
                  Census_OSVersion3_new,
                  OsBuildLab0_new,
                  OsBuildLab1_new,
                  OsBuildLab40_new,
                  OsBuildLab41_new]).reshape((1, -1))
    cols = ['AVProductsInstalled',
            'OsPlatformSubRelease',
            'SkuEdition',
            'SmartScreen',
            'Census_MDC2FormFactor',
            'Census_PrimaryDiskTypeName',
            'Census_SystemVolumeTotalCapacity',
            'Census_TotalPhysicalRAM',
            'Census_InternalPrimaryDiagonalDisplaySizeInInches',
            'Census_InternalPrimaryDisplayResolutionVertical',
            'Census_PowerPlatformRoleName',
            'Census_InternalBatteryNumberOfCharges',
            'Census_OSInstallTypeName',
            'Census_OSWUAutoUpdateOptionsName',
            'Census_ActivationChannel',
            'Census_IsSecureBootEnabled',
            'Wdft_IsGamer',
            'Wdft_RegionIdentifier',
            'AVProductStatesIdentifier_new',
            'CountryIdentifier_new',
            'OrganizationIdentifier_new',
            'GeoNameIdentifier_new',
            'LocaleEnglishNameIdentifier_new',
            'OsSuite_new',
            'IeVerIdentifier_new',
            'Census_OEMNameIdentifier_new',
            'Census_ProcessorCoreCount_new',
            'Census_ProcessorModelIdentifier_new',
            'Census_ChassisTypeName_new',
            'Census_OSEdition_new',
            'Census_OSUILocaleIdentifier_new',
            'Census_FirmwareManufacturerIdentifier_new',
            'AppVersion2_new',
            'AppVersion3_new',
            'AvSigVersion1_new',
            'Census_OSVersion3_new',
            'OsBuildLab0_new',
            'OsBuildLab1_new',
            'OsBuildLab40_new',
            'OsBuildLab41_new']

    v = pd.DataFrame(a, columns=cols)

    # Encoding
    no_encode = ['AVProductsInstalled',
                 'Census_IsSecureBootEnabled',
                 'Wdft_IsGamer',
                 'Census_ProcessorCoreCount_new']
    num_encode = ['Census_SystemVolumeTotalCapacity',
                  'Census_TotalPhysicalRAM',
                  'Census_InternalPrimaryDiagonalDisplaySizeInInches',
                  'Census_InternalPrimaryDisplayResolutionVertical',
                  'Census_InternalBatteryNumberOfCharges']
    freq_cats = ['OsPlatformSubRelease',
                 'SkuEdition',
                 'SmartScreen',
                 'Census_MDC2FormFactor',
                 'Census_PrimaryDiskTypeName',
                 'Census_PowerPlatformRoleName',
                 'Census_OSInstallTypeName',
                 'Census_OSWUAutoUpdateOptionsName',
                 'Census_ActivationChannel',
                 'Wdft_RegionIdentifier',
                 'AVProductStatesIdentifier_new',
                 'CountryIdentifier_new',
                 'OrganizationIdentifier_new',
                 'GeoNameIdentifier_new',
                 'LocaleEnglishNameIdentifier_new',
                 'OsSuite_new',
                 'IeVerIdentifier_new',
                 'Census_OEMNameIdentifier_new',
                 'Census_ProcessorModelIdentifier_new',
                 'Census_ChassisTypeName_new',
                 'Census_OSEdition_new',
                 'Census_OSUILocaleIdentifier_new',
                 'Census_FirmwareManufacturerIdentifier_new',
                 'AppVersion2_new',
                 'AppVersion3_new',
                 'AvSigVersion1_new',
                 'Census_OSVersion3_new',
                 'OsBuildLab0_new',
                 'OsBuildLab1_new',
                 'OsBuildLab40_new',
                 'OsBuildLab41_new']

    scaler = joblib.load('./data/models/long/Minmaxscaler.pkl')
    target_enc = joblib.load('./data/models/long/Target_enc.pkl')

    A = v[no_encode].values
    B = scaler.transform(v[num_encode])
    C = target_enc.transform(v[freq_cats]).values

    encoded_feats = np.concatenate((A,B,C),axis=1)


    # step3: predict the output

    # load SGDclassifier
    model = joblib.load('./data/models/long/sg.pkl')
    sgd = model.predict_proba(encoded_feats)[0][1]

    #load Naive Bayes
    model = joblib.load('./data/models/long/nb.pkl')
    nb = model.predict_proba(encoded_feats)[0][1]

    # load logistic regression
    model = joblib.load('./data/models/long/lg.pkl')
    lg = model.predict_proba(encoded_feats)[0][1]

    # load Linear Discriminant Analysis
    model = joblib.load('./data/models/long/lda.pkl')
    lda = model.predict_proba(encoded_feats)[0][1]

    # load AdaBoostClassifier
    model = joblib.load('./data/models/long/ada.pkl')
    ada = model.predict_proba(encoded_feats)[0][1]

    # load GradientBoostingClassifier
    model = joblib.load('./data/models/long/gbm.pkl')
    gbm = model.predict_proba(encoded_feats)[0][1]

    # RandomForestClassifier
    model = joblib.load('./data/models/long/rf.pkl')
    rf = model.predict_proba(encoded_feats)[0][1]

    # ExtraTreesClassifier
    model = joblib.load('./data/models/long/et.pkl')
    et = model.predict_proba(encoded_feats)[0][1]

    # LGBMClassifier
    model = joblib.load('./data/models/long/lgbm.pkl')
    lgbm = model.predict_proba(encoded_feats)[0][1]

    ensemble_feats = np.array([sgd,nb,lg,lda,ada,gbm,rf,et,lgbm]).reshape(1,-1)

    model = joblib.load('./data/models/long/NN.pkl')
    detections = model.predict_proba(ensemble_feats)[0][1]

    # a = np.array(a).reshape(1, -1)
    # bst = lgb.Booster(model_file='./data/models/New_LGB_Model.txt')
    # detections = bst.predict(a)
    # species = gbm.predict(a)
    # detections = round(detections[0], 2)
    if detections > 0.5:
        interpretation = 'Device is vulnerable'
    else:
        interpretation = 'Device is safe'

    # step4: return result json
    result = {
        'Status': 'Success',
        'Threshold_limit': 0.5,
        'Has_Detections': detections,
        'Interpretation': interpretation
    }

    return result
