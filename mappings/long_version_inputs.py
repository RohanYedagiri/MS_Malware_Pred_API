import numpy as np
import lightgbm as lgb


def parse_json_predict_result(request) -> dict:
    """
    returns parsed json
    :param request
    :return:
    """
    feats = request.get_json()
    AVProductStatesIdentifier = feats["AVProductStatesIdentifier"]
    AVProductsInstalled = feats["AVProductsInstalled"]
    CountryIdentifier = feats["CountryIdentifier"]
    CityIdentifier = feats["CityIdentifier"]
    OrganizationIdentifier = feats["OrganizationIdentifier"]
    GeoNameIdentifier = feats["GeoNameIdentifier"]
    LocaleEnglishNameIdentifier = feats["LocaleEnglishNameIdentifier"]
    OsBuild = feats["OsBuild"]
    OsSuite = feats["OsSuite"]
    OsPlatformSubRelease = feats["OsPlatformSubRelease"]
    SkuEdition = feats["SkuEdition"]
    IeVerIdentifier = feats["IeVerIdentifier"]
    SmartScreen = feats["SmartScreen"]
    Census_MDC2FormFactor = feats["Census_MDC2FormFactor"]
    Census_OEMNameIdentifier = feats["Census_OEMNameIdentifier"]
    Census_OEMModelIdentifier = feats["Census_OEMModelIdentifier"]
    Census_ProcessorCoreCount = feats["Census_ProcessorCoreCount"]
    Census_ProcessorModelIdentifier = feats["Census_ProcessorModelIdentifier"]
    Census_PrimaryDiskTotalCapacity = feats["Census_PrimaryDiskTotalCapacity"]
    Census_PrimaryDiskTypeName = feats["Census_PrimaryDiskTypeName"]
    Census_SystemVolumeTotalCapacity = feats["Census_SystemVolumeTotalCapacity"]
    Census_TotalPhysicalRAM = feats["Census_TotalPhysicalRAM"]
    Census_ChassisTypeName = feats["Census_ChassisTypeName"]
    Census_InternalPrimaryDiagonalDisplaySizeInInches = feats["Census_InternalPrimaryDiagonalDisplaySizeInInches"]
    Census_InternalPrimaryDisplayResolutionVertical = feats["Census_InternalPrimaryDisplayResolutionVertical"]
    Census_PowerPlatformRoleName = feats["Census_PowerPlatformRoleName"]
    Census_InternalBatteryNumberOfCharges = feats["Census_InternalBatteryNumberOfCharges"]
    Census_OSEdition = feats["Census_OSEdition"]
    Census_OSInstallTypeName = feats["Census_OSInstallTypeName"]
    Census_OSUILocaleIdentifier = feats["Census_OSUILocaleIdentifier"]
    Census_OSWUAutoUpdateOptionsName = feats["Census_OSWUAutoUpdateOptionsName"]
    Census_ActivationChannel = feats["Census_ActivationChannel"]
    Census_FirmwareManufacturerIdentifier = feats["Census_FirmwareManufacturerIdentifier"]
    Census_FirmwareVersionIdentifier = feats["Census_FirmwareVersionIdentifier"]
    Census_IsSecureBootEnabled = feats["Census_IsSecureBootEnabled"]
    Wdft_IsGamer = feats["Wdft_IsGamer"]
    Wdft_RegionIdentifier = feats["Wdft_RegionIdentifier"]
    engine_ver_1 = feats["engine_ver_1"]
    app_ver_1 = feats["app_ver_1"]
    app_ver_2 = feats["app_ver_2"]
    app_ver_3 = feats["app_ver_3"]
    avsig_ver_1 = feats["avsig_ver_1"]
    avsig_ver_2 = feats["avsig_ver_2"]
    OsBuildLab_ver_1 = feats["OsBuildLab_ver_1"]
    OsBuildLab_ver_3 = feats["OsBuildLab_ver_3"]
    OsBuildLab_ver_4 = feats["OsBuildLab_ver_4"]
    OsBuildLab_ver_5 = feats["OsBuildLab_ver_5"]
    Census_OS_ver_3 = feats["Census_OS_ver_3"]

    # step3: predict the output
    a = [AVProductStatesIdentifier,
         AVProductsInstalled,
         CountryIdentifier,
         CityIdentifier,
         OrganizationIdentifier,
         GeoNameIdentifier,
         LocaleEnglishNameIdentifier,
         OsBuild,
         OsSuite,
         OsPlatformSubRelease,
         SkuEdition,
         IeVerIdentifier,
         SmartScreen,
         Census_MDC2FormFactor,
         Census_OEMNameIdentifier,
         Census_OEMModelIdentifier,
         Census_ProcessorCoreCount,
         Census_ProcessorModelIdentifier,
         Census_PrimaryDiskTotalCapacity,
         Census_PrimaryDiskTypeName,
         Census_SystemVolumeTotalCapacity,
         Census_TotalPhysicalRAM,
         Census_ChassisTypeName,
         Census_InternalPrimaryDiagonalDisplaySizeInInches,
         Census_InternalPrimaryDisplayResolutionVertical,
         Census_PowerPlatformRoleName,
         Census_InternalBatteryNumberOfCharges,
         Census_OSEdition,
         Census_OSInstallTypeName,
         Census_OSUILocaleIdentifier,
         Census_OSWUAutoUpdateOptionsName,
         Census_ActivationChannel,
         Census_FirmwareManufacturerIdentifier,
         Census_FirmwareVersionIdentifier,
         Census_IsSecureBootEnabled,
         Wdft_IsGamer,
         Wdft_RegionIdentifier,
         engine_ver_1,
         app_ver_1,
         app_ver_2,
         app_ver_3,
         avsig_ver_1,
         avsig_ver_2,
         OsBuildLab_ver_1,
         OsBuildLab_ver_3,
         OsBuildLab_ver_4,
         OsBuildLab_ver_5,
         Census_OS_ver_3]
    a = np.array(a).reshape(1, -1)
    bst = lgb.Booster(model_file='./data/models/New_LGB_Model.txt')
    detections = bst.predict(a)
    # species = gbm.predict(a)
    detections = round(detections[0], 2)
    if detections > 0.5:
        interpretation = 'Device is vulnerable'
    else:
        interpretation = 'Device is safe'

    # step4: return result json
    result = {
        'Status': 'Success',
        'Threshold_limit': 0.5,
        'Has_Detections': detections,
        'Interpretation': interpretation
    }

    return result

